package com.rescam.xhb.framework.dao.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.HibernateException;
import org.hibernate.Query;

import com.rescam.xhb.common.dao.BasicDaoImpl;
import com.rescam.xhb.framework.dao.GoodsDao;
import com.rescam.xhb.framework.entity.Goods;

/**
 * 商品DAO实现
 * 
 * @author xueyang
 * 
 */
public class GoodsDaoImpl extends BasicDaoImpl<Goods>implements GoodsDao {

	@Override
	public Goods findById(Integer id) throws HibernateException {
		return super.findById(id);
	}

	@Override
	public void saveEntity(Goods entity) throws HibernateException {
		super.saveEntity(entity);
	}

	@Override
	public void deleteEntity(Goods entity) throws HibernateException {
		super.deleteEntity(entity);
	}

	@Override
	public void updateEntity(Goods entity) throws HibernateException {
		super.updateEntity(entity);
	}

	@Override
	public List<Goods> findByPage(String hql, int currentpage, int pageSize, Object... params) {
		return super.findByPage(hql, currentpage, pageSize, params);
	}

	@Override
	public List<Goods> findByPage(int currentpage, int pageSize) {
		return super.findByPage(currentpage, pageSize);
	}

	@Override
	public Integer getCount(String hql, Object... params) {
		return super.getCount(hql, params);
	}

	@Override
	public Integer getCount() {
		return super.getCount();
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	public int getGoodsTotalByTypeAndStatus(String goodsType, String goodsSalesStatus,
			int goodsCatalogId) {
		int total = 0;
		try {
			String sql = "SELECT count(*) FROM goods "
					+ " LEFT JOIN goods_image ON goods_image.goods_id = goods.goods_id"
					+ " LEFT JOIN goods_preferential ON goods_preferential.goods_id = goods.goods_id"
					+ " WHERE goods.goods_type = " + goodsType + " and goods.goods_sales_status = " + goodsSalesStatus
					+ " and goods.goods_catalog_id = " + goodsCatalogId;
			Query query = getHibernateTemplate().getSessionFactory().getCurrentSession().createSQLQuery(sql);

			List list= query.list();
			BigInteger bi = (BigInteger) list.get(0);
			total = bi.intValue();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return total;
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	public List<Map<String, Object>> findGoodsListByTypeAndStatus(String goodsType, String goodsSalesStatus,
			int goodsCatalogId, int page) {
		
		List list = new ArrayList();
		List<Map<String, Object>> returnList = new ArrayList<Map<String, Object>>();
		int rows = 10;
		int offset = (page - 1) * rows;
		try {
			String sql = "SELECT goods_image.goods_image_id,"
					+ "goods_image.image_path,goods_image.goods_image_status,goods.goods_id,"
					+ "goods.supplier_id,goods.goods_type,goods.goods_catalog_id,goods.goods_name,"
					+ "goods.goods_introduce,goods.service_hotline,goods.goods_price,goods.charge_unit,"
					+ "goods.goods_sales_status,goods.total,goods.sold,goods.inventories,goods.input_time,"
					+ "goods.on_sale_time,goods.off_sale_time,goods_preferential.goods_preferential_id,"
					+ "goods_preferential.preferential_type,goods_preferential.discount,"
					+ "goods_preferential.goods_preferential_status" + " FROM goods "
					+ " LEFT JOIN goods_image ON goods_image.goods_id = goods.goods_id"
					+ " LEFT JOIN goods_preferential ON goods_preferential.goods_id = goods.goods_id"
					+ " WHERE goods.goods_type = " + goodsType + " and goods.goods_sales_status = " + goodsSalesStatus
					+ " and goods.goods_catalog_id = " + goodsCatalogId + " LIMIT " + offset + " , " + rows;
			Query query = getHibernateTemplate().getSessionFactory().getCurrentSession().createSQLQuery(sql);

			list = query.list();
			for (int i = 0; i < list.size(); i++) {
				Object[] ob = (Object[]) list.get(i);
				Map<String, Object> dataMap = new HashMap<String, Object>();
				
				dataMap.put("goodsImageId", ob[0]);
				dataMap.put("imagePath", ob[1]);
				dataMap.put("goodsImageStatus", ob[2]);

				dataMap.put("goodsId", ob[3]);
				dataMap.put("supplierId", ob[4]);
				dataMap.put("goodsType", ob[5]);
				dataMap.put("goodsCatalogId", ob[6]);
				dataMap.put("goodsName", ob[7]);
				dataMap.put("goodsIntroduce", ob[8]);
				dataMap.put("serviceHotline", ob[9]);
				dataMap.put("goodsPrice", ob[10]);
				dataMap.put("chargeUnit", ob[11]);
				dataMap.put("goodsSalesStatus", ob[12]);
				dataMap.put("total", ob[13]);
				dataMap.put("sold", ob[14]);
				dataMap.put("inventories", ob[15]);
				dataMap.put("inputTime", ob[16]);
				dataMap.put("onSaleTime", ob[17]);
				dataMap.put("offSaleTime", ob[18]);

				dataMap.put("goodsPreferentialId", ob[19]);
				dataMap.put("preferentialType", ob[20]);
				dataMap.put("discount", ob[21]);
				dataMap.put("goodsPreferentialStatus", ob[22]);

				returnList.add(dataMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return returnList;
	}

}
